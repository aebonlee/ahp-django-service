import React, { useState, useEffect } from 'react';
import Card from '../common/Card';
import Button from '../common/Button';
import { useColorTheme, ColorTheme } from '../../hooks/useColorTheme';
import { API_BASE_URL } from '../../config/api';

interface PersonalSettingsProps {
  user: {
    id: string | number;  // Î∞±ÏóîÎìúÎäî numberÎ°ú Î≥¥ÎÉÑ
    first_name: string;
    last_name: string;
    email: string;
    role: 'super_admin' | 'admin' | 'service_tester' | 'evaluator';
    admin_type?: 'super' | 'personal';
  };
  onBack?: () => void;
  onUserUpdate?: (updatedUser: {
    id: string | number;  // Î∞±ÏóîÎìúÎäî numberÎ°ú Î≥¥ÎÉÑ
    first_name: string;
    last_name: string;
    email: string;
    role: 'super_admin' | 'admin' | 'service_tester' | 'evaluator';
    admin_type?: 'super' | 'personal';
  }) => void;
}

interface UserSettings {
  profile: {
    firstName: string;
    lastName: string;
    email: string;
    organization: string;
    department: string;
    phone: string;
    profileImage: string;
  };
  security: {
    twoFactorEnabled: boolean;
    sessionTimeout: number;
    loginAlerts: boolean;
  };
  workflow: {
    autoSaveInterval: number;
    defaultTemplate: string;
    screenLayout: string;
    defaultViewMode: string;
    showTutorials: boolean;
  };
  notifications: {
    emailNotifications: boolean;
    evaluationComplete: boolean;
    projectStatusChange: boolean;
    weeklyReport: boolean;
    systemUpdates: boolean;
    deadlineReminders: boolean;
  };
  display: {
    theme: ColorTheme | 'auto';
    darkMode: boolean;
    language: string;
    dateFormat: string;
    numberFormat: string;
    timezone: string;
  };
  privacy: {
    profileVisibility: 'public' | 'private' | 'team';
    showEmail: boolean;
    showPhone: boolean;
    activityTracking: boolean;
  };
}

const PersonalSettings: React.FC<PersonalSettingsProps> = ({ user, onBack, onUserUpdate }) => {
  const { currentTheme, changeColorTheme } = useColorTheme();
  const [activeTab, setActiveTab] = useState<'profile' | 'security' | 'workflow' | 'notifications' | 'display' | 'privacy' | 'data'>('profile');
  
  // ÏÑúÎ≤Ñ Í∏∞Î∞ò ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï Ï¥àÍ∏∞Ìôî (localStorage ÏôÑÏ†Ñ Ï†úÍ±∞)
  const getInitialSettings = (): UserSettings => {
    return {
      profile: {
        firstName: user.first_name,
        lastName: user.last_name,
        email: user.email,
        organization: '',
        department: '',
        phone: '',
        profileImage: ''
      },
      security: {
        twoFactorEnabled: false,
        sessionTimeout: 30,
        loginAlerts: true
      },
      workflow: {
        autoSaveInterval: 60,
        defaultTemplate: 'standard',
        screenLayout: 'standard',
        defaultViewMode: 'grid',
        showTutorials: true
      },
      notifications: {
        emailNotifications: true,
        evaluationComplete: true,
        projectStatusChange: true,
        weeklyReport: false,
        systemUpdates: false,
        deadlineReminders: true
      },
      display: {
        theme: currentTheme,
        darkMode: false,
        language: 'ko',
        dateFormat: 'YYYY-MM-DD',
        numberFormat: '1,234.56',
        timezone: 'Asia/Seoul'
      },
      privacy: {
        profileVisibility: 'team',
        showEmail: false,
        showPhone: false,
        activityTracking: true
      }
    };
  };
  
  const [settings, setSettings] = useState<UserSettings>(getInitialSettings());

  const [passwordForm, setPasswordForm] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });

  const [saveStatus, setSaveStatus] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');

  // ÏÑúÎ≤ÑÏóêÏÑú ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï Î°úÎìú (localStorage Ï†úÍ±∞Îê®)
  useEffect(() => {
    const loadUserDataFromAPI = async () => {
      try {
        const response = await fetch(`${API_BASE_URL}/api/auth/profile`, {
          credentials: 'include',
          headers: {
            'Content-Type': 'application/json',
          },
        });

        if (response.ok) {
          const data = await response.json();
          console.log('‚úÖ APIÏóêÏÑú ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï Î°úÎìú ÏÑ±Í≥µ');
          
          if (data.user) {
            const apiSettings = {
              profile: {
                firstName: data.user.first_name || settings.profile.firstName,
                lastName: data.user.last_name || settings.profile.lastName,
                email: data.user.email || settings.profile.email,
                phone: data.user.phone || settings.profile.phone,
                organization: data.user.organization || settings.profile.organization,
                department: data.user.department || settings.profile.department,
                profileImage: data.user.profile_image || settings.profile.profileImage
              },
              security: settings.security,
              workflow: settings.workflow,
              notifications: data.user.notifications || settings.notifications,
              display: {
                ...settings.display,
                theme: data.user.theme || settings.display.theme,
                language: data.user.language || settings.display.language
              },
              privacy: settings.privacy
            };
            
            setSettings(apiSettings);
            
            // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏ ÏΩúÎ∞± Ìò∏Ï∂ú
            if (onUserUpdate && (data.user.first_name !== user.first_name || data.user.last_name !== user.last_name)) {
              onUserUpdate({
                ...user,
                first_name: data.user.first_name,
                last_name: data.user.last_name
              });
            }
          }
        } else if (response.status === 404) {
          console.log('‚ö†Ô∏è ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑÏù¥ DBÏóê ÏóÜÏùå - Ï¥àÍ∏∞ ÏÑ§Ï†ï ÏÇ¨Ïö©');
          // DBÏóê ÌîÑÎ°úÌïÑÏù¥ ÏóÜÏúºÎ©¥ ÌòÑÏû¨ ÏÑ§Ï†ïÏùÑ Ï†ÄÏû•
          saveSettingsToAPI();
        }
      } catch (error) {
        console.warn('üì¥ API Ïó∞Í≤∞ Ïã§Ìå®:', error);
        // API Ïã§Ìå® Ïãú Í∏∞Î≥∏ ÏÑ§Ï†ï Ïú†ÏßÄ
      }
    };

    loadUserDataFromAPI();
  }, []);

  // ÏÑ§Ï†ïÏùÑ APIÎ°ú Ï†ÄÏû• (localStorage ÏôÑÏ†Ñ Ï†úÍ±∞)
  const saveSettingsToAPI = async () => {
    setSaveStatus('saving');
    
    try {
      // ÌÖåÎßà ÏÑ§Ï†ï Ï†ÅÏö© (Ï¶âÏãú)
      if (settings.display.theme !== 'auto' && settings.display.theme !== currentTheme) {
        changeColorTheme(settings.display.theme);
      }

      // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Î≥ÄÍ≤Ω Ïãú Ï¶âÏãú UI ÏóÖÎç∞Ïù¥Ìä∏
      const isNameChanged = settings.profile.firstName !== user.first_name || settings.profile.lastName !== user.last_name;
      console.log('üîç PersonalSettings: Ïù¥Î¶Ñ Î≥ÄÍ≤Ω Ï≤¥ÌÅ¨', {
        ÌòÑÏû¨Ïù¥Î¶Ñ: `${user.first_name} ${user.last_name}`,
        ÏÉàÏù¥Î¶Ñ: `${settings.profile.firstName} ${settings.profile.lastName}`,
        Î≥ÄÍ≤ΩÎê®: isNameChanged,
        onUserUpdateÏ°¥Ïû¨: !!onUserUpdate
      });
      
      if (isNameChanged && onUserUpdate) {
        // Ï¶âÏãú ÏÉÅÏúÑ Ïª¥Ìè¨ÎÑåÌä∏Ïóê Î≥ÄÍ≤ΩÏÇ¨Ìï≠ ÏïåÎ¶º
        const updatedUser = {
          ...user,
          first_name: settings.profile.firstName,
          last_name: settings.profile.lastName,
          _updated: Date.now()
        };
        console.log('üîÑ PersonalSettings: Ï¶âÏãú UI ÏóÖÎç∞Ïù¥Ìä∏!', updatedUser);
        onUserUpdate(updatedUser);
      }

      // APIÎ°ú ÏÑúÎ≤ÑÏóê Ï†ÄÏû•
      const requestData = {
        first_name: settings.profile.firstName,
        last_name: settings.profile.lastName,
        email: settings.profile.email,
        phone: settings.profile.phone,
        organization: settings.profile.organization,
        department: settings.profile.department,
        notifications: settings.notifications,
        theme: settings.display.theme,
        language: settings.display.language
      };

      console.log('üíæ APIÎ°ú ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï Ï†ÄÏû• ÏãúÏûë');
      
      const response = await fetch(`${API_BASE_URL}/api/auth/profile`, {
        method: 'PUT',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
      });

      if (response.ok) {
        console.log('‚úÖ API ÏÑ§Ï†ï Ï†ÄÏû• ÏÑ±Í≥µ');
        setSaveStatus('saved');
        setTimeout(() => setSaveStatus('idle'), 2000);
      } else {
        throw new Error('API Ï†ÄÏû• Ïã§Ìå®');
      }
    } catch (error) {
      console.error('‚ùå ÏÑ§Ï†ï Ï†ÄÏû• Ïã§Ìå®:', error);
      setSaveStatus('error');
      setTimeout(() => setSaveStatus('idle'), 3000);
    }
  };

  // Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ìï®Ïàò
  const handleDataImport = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    try {
      const text = await file.text();
      const importData = JSON.parse(text);
      
      if (window.confirm('Í∞ÄÏ†∏Ïò® Îç∞Ïù¥ÌÑ∞Î°ú ÌòÑÏû¨ ÏÑ§Ï†ïÏùÑ ÎçÆÏñ¥Ïì∞ÏãúÍ≤†ÏäµÎãàÍπå?')) {
        setSettings(importData.settings || importData);
        await saveSettingsToAPI();
        alert('ÏÑ§Ï†ïÏùÑ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Í∞ÄÏ†∏ÏôîÏäµÎãàÎã§.');
      }
    } catch (error) {
      alert('ÌååÏùºÏùÑ ÏùΩÎäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  // Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞ Ìï®Ïàò
  const handleDataExport = () => {
    const exportData = {
      version: '1.0',
      exportDate: new Date().toISOString(),
      user: {
        id: user.id,
        email: user.email,
        role: user.role
      },
      settings
    };

    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `ahp-settings-${user.email}-${new Date().toISOString().split('T')[0]}.json`;
    a.click();
    URL.revokeObjectURL(url);
  };

  // ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω Ìï®Ïàò
  const handlePasswordChange = async () => {
    if (passwordForm.newPassword !== passwordForm.confirmPassword) {
      alert('ÏÉà ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÏäµÎãàÎã§.');
      return;
    }

    try {
      const response = await fetch(`${API_BASE_URL}/api/auth/change-password`, {
        method: 'PUT',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          current_password: passwordForm.currentPassword,
          new_password: passwordForm.newPassword,
        }),
      });

      if (response.ok) {
        alert('ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§.');
        setPasswordForm({ currentPassword: '', newPassword: '', confirmPassword: '' });
      } else {
        const error = await response.json();
        alert(error.message || 'ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤ΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    } catch (error) {
      alert('ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  // Í≥ÑÏ†ï ÏÇ≠Ï†ú Ìï®Ïàò
  const handleDeleteAccount = async () => {
    if (!window.confirm('Ï†ïÎßêÎ°ú Í≥ÑÏ†ïÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå? Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.')) {
      return;
    }

    if (!window.confirm('Î™®Îì† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏòÅÍµ¨Ï†ÅÏúºÎ°ú ÏÇ≠Ï†úÎê©ÎãàÎã§. Í≥ÑÏÜçÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
      return;
    }

    try {
      const response = await fetch(`${API_BASE_URL}/api/auth/delete-account`, {
        method: 'DELETE',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        alert('Í≥ÑÏ†ïÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
        // Î°úÍ∑∏ÏïÑÏõÉ Ï≤òÎ¶¨
        window.location.href = '/';
      } else {
        const error = await response.json();
        alert(error.message || 'Í≥ÑÏ†ï ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    } catch (error) {
      alert('Í≥ÑÏ†ï ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  const updateSettings = (section: keyof UserSettings, field: string, value: any) => {
    setSettings(prev => ({
      ...prev,
      [section]: {
        ...prev[section],
        [field]: value
      }
    }));
  };

  const getSaveStatusText = () => {
    switch (saveStatus) {
      case 'saving': return 'Ï†ÄÏû• Ï§ë...';
      case 'saved': return 'Ï†ÄÏû•Îê®';
      case 'error': return 'Ï†ÄÏû• Ïã§Ìå®';
      default: return 'Ï†ÄÏû•';
    }
  };

  const getSaveStatusColor = () => {
    switch (saveStatus) {
      case 'saving': return 'bg-yellow-500';
      case 'saved': return 'bg-green-500';
      case 'error': return 'bg-red-500';
      default: return 'bg-blue-500';
    }
  };

  const tabs = [
    { id: 'profile', label: 'ÌîÑÎ°úÌïÑ', icon: 'üë§' },
    { id: 'security', label: 'Î≥¥Ïïà', icon: 'üîí' },
    { id: 'workflow', label: 'ÏõåÌÅ¨ÌîåÎ°úÏö∞', icon: '‚öôÔ∏è' },
    { id: 'notifications', label: 'ÏïåÎ¶º', icon: 'üîî' },
    { id: 'display', label: 'ÌëúÏãú', icon: 'üé®' },
    { id: 'privacy', label: 'Í∞úÏù∏Ï†ïÎ≥¥', icon: 'üõ°Ô∏è' },
    { id: 'data', label: 'Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨', icon: 'üíæ' }
  ];

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-6">
      {/* Ìó§Îçî */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Í∞úÏù∏ ÏÑ§Ï†ï</h1>
          <p className="text-gray-600 mt-1">Í≥ÑÏ†ï Ï†ïÎ≥¥ÏôÄ Í∞úÏù∏ ÌôòÍ≤ΩÏÑ§Ï†ïÏùÑ Í¥ÄÎ¶¨Ìï©ÎãàÎã§ (ÏÑúÎ≤Ñ Í∏∞Î∞ò)</p>
        </div>
        
        <div className="flex items-center space-x-3">
          <Button
            variant="secondary"
            onClick={onBack}
            className="flex items-center"
          >
            ‚Üê Îí§Î°ú
          </Button>
          
          <Button
            variant="primary"
            onClick={saveSettingsToAPI}
            disabled={saveStatus === 'saving'}
            className={`flex items-center ${getSaveStatusColor()}`}
          >
            üíæ {getSaveStatusText()}
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* ÏÇ¨Ïù¥ÎìúÎ∞î ÌÉ≠ */}
        <div className="lg:col-span-1">
          <Card>
            <nav className="space-y-1">
              {tabs.map(tab => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id as any)}
                  className={`w-full text-left px-4 py-3 rounded-lg transition-colors flex items-center space-x-3 ${
                    activeTab === tab.id
                      ? 'bg-blue-100 text-blue-700 border-blue-200'
                      : 'text-gray-600 hover:bg-gray-100'
                  }`}
                >
                  <span className="text-lg">{tab.icon}</span>
                  <span className="font-medium">{tab.label}</span>
                </button>
              ))}
            </nav>
          </Card>
        </div>

        {/* Î©îÏù∏ ÏΩòÌÖêÏ∏† */}
        <div className="lg:col-span-3">
          {activeTab === 'profile' && (
            <Card title="ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥">
              <div className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Ïù¥Î¶Ñ</label>
                    <input
                      type="text"
                      value={settings.profile.firstName}
                      onChange={(e) => updateSettings('profile', 'firstName', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">ÏÑ±</label>
                    <input
                      type="text"
                      value={settings.profile.lastName}
                      onChange={(e) => updateSettings('profile', 'lastName', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Ïù¥Î©îÏùº</label>
                    <input
                      type="email"
                      value={settings.profile.email}
                      onChange={(e) => updateSettings('profile', 'email', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Ï†ÑÌôîÎ≤àÌò∏</label>
                    <input
                      type="tel"
                      value={settings.profile.phone}
                      onChange={(e) => updateSettings('profile', 'phone', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Ï°∞ÏßÅ</label>
                    <input
                      type="text"
                      value={settings.profile.organization}
                      onChange={(e) => updateSettings('profile', 'organization', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Î∂ÄÏÑú</label>
                    <input
                      type="text"
                      value={settings.profile.department}
                      onChange={(e) => updateSettings('profile', 'department', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                </div>
              </div>
            </Card>
          )}

          {activeTab === 'security' && (
            <Card title="Î≥¥Ïïà ÏÑ§Ï†ï">
              <div className="space-y-6">
                <div>
                  <h3 className="text-lg font-medium mb-4">ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω</h3>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">ÌòÑÏû¨ ÎπÑÎ∞ÄÎ≤àÌò∏</label>
                      <input
                        type="password"
                        value={passwordForm.currentPassword}
                        onChange={(e) => setPasswordForm({...passwordForm, currentPassword: e.target.value})}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">ÏÉà ÎπÑÎ∞ÄÎ≤àÌò∏</label>
                      <input
                        type="password"
                        value={passwordForm.newPassword}
                        onChange={(e) => setPasswordForm({...passwordForm, newPassword: e.target.value})}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">ÏÉà ÎπÑÎ∞ÄÎ≤àÌò∏ ÌôïÏù∏</label>
                      <input
                        type="password"
                        value={passwordForm.confirmPassword}
                        onChange={(e) => setPasswordForm({...passwordForm, confirmPassword: e.target.value})}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                    <Button variant="primary" onClick={handlePasswordChange}>
                      ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω
                    </Button>
                  </div>
                </div>

                <div>
                  <h3 className="text-lg font-medium mb-4">Î≥¥Ïïà ÏòµÏÖò</h3>
                  <div className="space-y-4">
                    <label className="flex items-center">
                      <input
                        type="checkbox"
                        checked={settings.security.twoFactorEnabled}
                        onChange={(e) => updateSettings('security', 'twoFactorEnabled', e.target.checked)}
                        className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                      />
                      <span className="ml-2">2Îã®Í≥Ñ Ïù∏Ï¶ù ÏÇ¨Ïö©</span>
                    </label>
                    <label className="flex items-center">
                      <input
                        type="checkbox"
                        checked={settings.security.loginAlerts}
                        onChange={(e) => updateSettings('security', 'loginAlerts', e.target.checked)}
                        className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                      />
                      <span className="ml-2">Î°úÍ∑∏Ïù∏ ÏïåÎ¶º Î∞õÍ∏∞</span>
                    </label>
                  </div>
                </div>
              </div>
            </Card>
          )}

          {activeTab === 'workflow' && (
            <Card title="ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÏÑ§Ï†ï">
              <div className="space-y-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">ÏûêÎèô Ï†ÄÏû• Í∞ÑÍ≤© (Ï¥à)</label>
                  <select
                    value={settings.workflow.autoSaveInterval}
                    onChange={(e) => updateSettings('workflow', 'autoSaveInterval', parseInt(e.target.value))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value={30}>30Ï¥à</option>
                    <option value={60}>1Î∂Ñ</option>
                    <option value={120}>2Î∂Ñ</option>
                    <option value={300}>5Î∂Ñ</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Í∏∞Î≥∏ ÌÖúÌîåÎ¶ø</label>
                  <select
                    value={settings.workflow.defaultTemplate}
                    onChange={(e) => updateSettings('workflow', 'defaultTemplate', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="standard">ÌëúÏ§Ä</option>
                    <option value="academic">ÌïôÏà†</option>
                    <option value="business">ÎπÑÏ¶àÎãàÏä§</option>
                  </select>
                </div>

                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={settings.workflow.showTutorials}
                    onChange={(e) => updateSettings('workflow', 'showTutorials', e.target.checked)}
                    className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                  />
                  <span className="ml-2">ÌäúÌÜ†Î¶¨Ïñº ÌëúÏãú</span>
                </label>
              </div>
            </Card>
          )}

          {activeTab === 'notifications' && (
            <Card title="ÏïåÎ¶º ÏÑ§Ï†ï">
              <div className="space-y-4">
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={settings.notifications.emailNotifications}
                    onChange={(e) => updateSettings('notifications', 'emailNotifications', e.target.checked)}
                    className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                  />
                  <span className="ml-2">Ïù¥Î©îÏùº ÏïåÎ¶º Î∞õÍ∏∞</span>
                </label>
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={settings.notifications.evaluationComplete}
                    onChange={(e) => updateSettings('notifications', 'evaluationComplete', e.target.checked)}
                    className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                  />
                  <span className="ml-2">ÌèâÍ∞Ä ÏôÑÎ£å ÏïåÎ¶º</span>
                </label>
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={settings.notifications.projectStatusChange}
                    onChange={(e) => updateSettings('notifications', 'projectStatusChange', e.target.checked)}
                    className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                  />
                  <span className="ml-2">ÌîÑÎ°úÏ†ùÌä∏ ÏÉÅÌÉú Î≥ÄÍ≤Ω ÏïåÎ¶º</span>
                </label>
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={settings.notifications.deadlineReminders}
                    onChange={(e) => updateSettings('notifications', 'deadlineReminders', e.target.checked)}
                    className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                  />
                  <span className="ml-2">ÎßàÍ∞êÏùº ÏïåÎ¶º</span>
                </label>
              </div>
            </Card>
          )}

          {activeTab === 'display' && (
            <Card title="ÌëúÏãú ÏÑ§Ï†ï">
              <div className="space-y-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Ïñ∏Ïñ¥</label>
                  <select
                    value={settings.display.language}
                    onChange={(e) => updateSettings('display', 'language', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="ko">ÌïúÍµ≠Ïñ¥</option>
                    <option value="en">English</option>
                    <option value="ja">Êó•Êú¨Ë™û</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">ÎÇ†Ïßú ÌòïÏãù</label>
                  <select
                    value={settings.display.dateFormat}
                    onChange={(e) => updateSettings('display', 'dateFormat', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="YYYY-MM-DD">2024-01-01</option>
                    <option value="MM/DD/YYYY">01/01/2024</option>
                    <option value="DD/MM/YYYY">01/01/2024</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">ÏãúÍ∞ÑÎåÄ</label>
                  <select
                    value={settings.display.timezone}
                    onChange={(e) => updateSettings('display', 'timezone', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="Asia/Seoul">ÌïúÍµ≠ ÌëúÏ§ÄÏãú (KST)</option>
                    <option value="UTC">ÌòëÏ†ï ÏÑ∏Í≥ÑÏãú (UTC)</option>
                    <option value="America/New_York">ÎØ∏Íµ≠ ÎèôÎ∂ÄÏãúÍ∞Ñ (EST)</option>
                  </select>
                </div>
              </div>
            </Card>
          )}

          {activeTab === 'privacy' && (
            <Card title="Í∞úÏù∏Ï†ïÎ≥¥ ÏÑ§Ï†ï">
              <div className="space-y-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">ÌîÑÎ°úÌïÑ Í≥µÍ∞ú Î≤îÏúÑ</label>
                  <select
                    value={settings.privacy.profileVisibility}
                    onChange={(e) => updateSettings('privacy', 'profileVisibility', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="public">Í≥µÍ∞ú</option>
                    <option value="team">ÌåÄ ÎÇ¥ Í≥µÍ∞ú</option>
                    <option value="private">ÎπÑÍ≥µÍ∞ú</option>
                  </select>
                </div>

                <div className="space-y-4">
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={settings.privacy.showEmail}
                      onChange={(e) => updateSettings('privacy', 'showEmail', e.target.checked)}
                      className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                    />
                    <span className="ml-2">Ïù¥Î©îÏùº Ï£ºÏÜå ÌëúÏãú</span>
                  </label>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={settings.privacy.showPhone}
                      onChange={(e) => updateSettings('privacy', 'showPhone', e.target.checked)}
                      className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                    />
                    <span className="ml-2">Ï†ÑÌôîÎ≤àÌò∏ ÌëúÏãú</span>
                  </label>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={settings.privacy.activityTracking}
                      onChange={(e) => updateSettings('privacy', 'activityTracking', e.target.checked)}
                      className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                    />
                    <span className="ml-2">ÌôúÎèô Ï∂îÏ†Å ÌóàÏö©</span>
                  </label>
                </div>
              </div>
            </Card>
          )}

          {activeTab === 'data' && (
            <Card title="Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨">
              <div className="space-y-6">
                <div>
                  <h3 className="text-lg font-medium mb-4">Îç∞Ïù¥ÌÑ∞ Î∞±ÏóÖ Î∞è Î≥µÏõê</h3>
                  <div className="flex space-x-4">
                    <Button variant="primary" onClick={handleDataExport}>
                      üì• ÏÑ§Ï†ï ÎÇ¥Î≥¥ÎÇ¥Í∏∞
                    </Button>
                    <label className="cursor-pointer">
                      <Button variant="secondary">
                        üì§ ÏÑ§Ï†ï Í∞ÄÏ†∏Ïò§Í∏∞
                      </Button>
                      <input
                        type="file"
                        accept=".json"
                        onChange={handleDataImport}
                        className="hidden"
                      />
                    </label>
                  </div>
                </div>

                <div className="border-t pt-6">
                  <h3 className="text-lg font-medium mb-4 text-red-600">ÏúÑÌóò Íµ¨Ïó≠</h3>
                  <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                    <p className="text-red-800 mb-4">
                      Í≥ÑÏ†ïÏùÑ ÏÇ≠Ï†úÌïòÎ©¥ Î™®Îì† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏòÅÍµ¨Ï†ÅÏúºÎ°ú ÏÇ≠Ï†úÎê©ÎãàÎã§.
                    </p>
                    <Button variant="error" onClick={handleDeleteAccount}>
                      ‚ö†Ô∏è Í≥ÑÏ†ï ÏÇ≠Ï†ú
                    </Button>
                  </div>
                </div>
              </div>
            </Card>
          )}
        </div>
      </div>
    </div>
  );
};

export default PersonalSettings;