import React, { useState, useEffect } from 'react';
import Card from '../common/Card';
import Button from '../common/Button';
import Input from '../common/Input';
import HierarchyTreeVisualization from '../common/HierarchyTreeVisualization';
import HierarchyTreeBuilder from '../modeling/HierarchyTreeBuilder';
import BulkCriteriaInput from '../criteria/BulkCriteriaInput';
import dataService from '../../services/dataService_clean';
import { CriteriaData } from '../../services/api';

interface Criterion extends Omit<CriteriaData, 'project_id' | 'position' | 'id'> {
  id: string; // required
  level: number; // override to make required
  children?: Criterion[];
  weight?: number;
}

interface CriteriaManagementProps {
  projectId: string;
  projectTitle?: string;
  onComplete: () => void;
  onCriteriaChange?: (criteriaCount: number) => void;
}

const CriteriaManagement: React.FC<CriteriaManagementProps> = ({ projectId, projectTitle, onComplete, onCriteriaChange }) => {
  const [criteria, setCriteria] = useState<Criterion[]>([]);
  const [useVisualBuilder, setUseVisualBuilder] = useState(false);

  // CriteriaDataÎ•º CriterionÏúºÎ°ú Î≥ÄÌôò
  const convertToCriterion = (data: CriteriaData): Criterion => ({
    id: data.id || `crit_${Date.now()}_${Math.random()}`,
    name: data.name,
    description: data.description,
    parent_id: data.parent_id,
    level: data.level || 1,
    order: data.order,
    children: [],
    weight: 0
  });

  // CriterionÏùÑ CriteriaDataÎ°ú Î≥ÄÌôò
  const convertToCriteriaData = (crit: Partial<Criterion & { position?: number }>): Omit<CriteriaData, 'id'> => ({
    project_id: projectId,
    name: crit.name || '',
    description: crit.description || '',
    parent_id: crit.parent_id,
    level: crit.level || 1,
    position: crit.position || crit.order || 0,
    order: crit.order
  });
  const [layoutMode, setLayoutMode] = useState<'vertical' | 'horizontal'>('vertical');
  const [showHelp, setShowHelp] = useState(false);
  const [showBulkInput, setShowBulkInput] = useState(false);
  const [showImportDialog, setShowImportDialog] = useState(false);
  const [pendingImport, setPendingImport] = useState<{
    rootCriteria: Criterion[];
    subCriteria: Criterion[];
    allCriteria: Criterion[];
  } | null>(null);

  useEffect(() => {
    // Î∞±ÏóîÎìúÏóêÏÑú Ïã§Ï†ú ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ Í∏∞Ï§Ä Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    const loadProjectCriteria = async () => {
      try {
        console.log(`üîç ÌîÑÎ°úÏ†ùÌä∏ ${projectId}Ïùò Í∏∞Ï§Ä Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ï§ë...`);
        const criteriaData = await dataService.getCriteria(projectId);
        const convertedCriteria = (criteriaData || []).map(convertToCriterion);
        setCriteria(convertedCriteria);
        console.log(`‚úÖ ${convertedCriteria.length}Í∞ú Í∏∞Ï§Ä Î°úÎìú ÏôÑÎ£å`);
        
        // Î∂ÄÎ™® Ïª¥Ìè¨ÎÑåÌä∏Ïóê Í∞úÏàò ÏïåÎ¶º
        if (onCriteriaChange) {
          onCriteriaChange(convertedCriteria.length);
        }
      } catch (error) {
        console.error('‚ùå Í∏∞Ï§Ä Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
        setCriteria([]);
        if (onCriteriaChange) {
          onCriteriaChange(0);
        }
      }
    };

    if (projectId) {
      loadProjectCriteria();
    }
  }, [projectId]);

  // Í∏∞Ï§ÄÏù¥ Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ Î∂ÄÎ™® Ïª¥Ìè¨ÎÑåÌä∏Ïóê Í∞úÏàò ÏïåÎ¶º
  useEffect(() => {
    const totalCount = getAllCriteria(criteria).length;
    if (onCriteriaChange) {
      onCriteriaChange(totalCount);
    }
  }, [criteria, onCriteriaChange]);

  const [evaluationMethod, setEvaluationMethod] = useState<'pairwise' | 'direct'>('pairwise');
  const [newCriterion, setNewCriterion] = useState({ name: '', description: '', parentId: '' });
  const [errors, setErrors] = useState<Record<string, string>>({});

  // ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ Í∏∞Ï§Ä Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• (ÌòÑÏû¨ ÎØ∏ÏÇ¨Ïö© - localStorage Ï†úÍ±∞Îê®)
  // const saveProjectCriteria = (criteriaData: Criterion[]) => {
  //   // localStorage Ï†úÍ±∞Îê® - PostgreSQLÎ°ú Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
  //   console.log(`Saved ${getAllCriteria(criteriaData).length} criteria for project ${projectId}`);
  // };

  const validateCriterion = (name: string): boolean => {
    const newErrors: Record<string, string> = {};

    if (!name.trim()) {
      newErrors.name = 'Í∏∞Ï§ÄÎ™ÖÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.';
    } else if (name.length < 2) {
      newErrors.name = 'Í∏∞Ï§ÄÎ™ÖÏùÄ 2Ïûê Ïù¥ÏÉÅÏù¥Ïñ¥Ïïº Ìï©ÎãàÎã§.';
    } else {
      // Check for duplicate names
      const allCriteria = getAllCriteria(criteria);
      if (allCriteria.some(c => c.name.toLowerCase() === name.toLowerCase())) {
        newErrors.name = 'ÎèôÏùºÌïú Í∏∞Ï§ÄÎ™ÖÏù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§.';
      }
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const getAllCriteria = (criteriaList: Criterion[]): Criterion[] => {
    const all: Criterion[] = [];
    const traverse = (items: Criterion[]) => {
      items.forEach(item => {
        all.push(item);
        if (item.children) {
          traverse(item.children);
        }
      });
    };
    traverse(criteriaList);
    return all;
  };

  // ÏãúÍ∞ÅÌôîÎ•º ÏúÑÌïú ÌèâÎ©¥ Î∞∞Ïó¥ ÏÉùÏÑ±
  const getFlatCriteriaForVisualization = (criteriaList: Criterion[]): Criterion[] => {
    const flat: Criterion[] = [];
    const traverse = (items: Criterion[], parentLevel: number = 0) => {
      items.forEach(item => {
        // ÏïÑÏù¥ÌÖúÏùò Ïã§Ï†ú Î†àÎ≤® ÏÇ¨Ïö© (Ï†ÄÏû•Îêú Î†àÎ≤®Ïù¥ ÏûàÏúºÎ©¥ ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ Î∂ÄÎ™® Î†àÎ≤® + 1)
        const actualLevel = item.level || (parentLevel + 1);
        
        // ÌèâÎ©¥ Î∞∞Ïó¥Ïóê Ï∂îÍ∞Ä (children Ï†úÍ±∞)
        flat.push({
          id: item.id,
          name: item.name,
          description: item.description,
          parent_id: item.parent_id,
          level: actualLevel,
          weight: item.weight || 0
        });
        
        // ÌïòÏúÑ Ìï≠Î™©Ïù¥ ÏûàÏúºÎ©¥ Ïû¨Í∑ÄÏ†ÅÏúºÎ°ú Ï≤òÎ¶¨
        if (item.children && item.children.length > 0) {
          traverse(item.children, actualLevel);
        }
      });
    };
    traverse(criteriaList);
    return flat;
  };

  const handleAddCriterion = async () => {
    console.log('üöÄ CriteriaManagement handleAddCriterion ÏãúÏûë:', {
      projectId,
      criterionName: newCriterion.name,
      criterionDescription: newCriterion.description,
      parentId: newCriterion.parentId
    });
    
    if (!validateCriterion(newCriterion.name)) {
      console.log('‚ùå Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ Ïã§Ìå®');
      return;
    }

    // Î∂ÄÎ™®Í∞Ä ÏûàÏúºÎ©¥ Î∂ÄÎ™® Î†àÎ≤® + 1, ÏóÜÏúºÎ©¥ 1Î†àÎ≤®
    let level = 1;
    if (newCriterion.parentId) {
      const parent = getAllCriteria(criteria).find(c => c.id === newCriterion.parentId);
      level = parent ? (parent.level || 1) + 1 : 2;
    }
    
    // ÏµúÎåÄ 5Î†àÎ≤®ÍπåÏßÄÎßå ÌóàÏö©
    if (level > 5) {
      setErrors({ name: 'ÏµúÎåÄ 5Îã®Í≥ÑÍπåÏßÄÎßå Í∏∞Ï§ÄÏùÑ ÏÉùÏÑ±Ìï† Ïàò ÏûàÏäµÎãàÎã§.' });
      return;
    }

    try {
      const criterionData = convertToCriteriaData({
        name: newCriterion.name,
        description: newCriterion.description || '',
        parent_id: newCriterion.parentId || null,
        level,
        order: getAllCriteria(criteria).filter(c => (c.level || 1) === level).length + 1
      });

      console.log('üîÑ CriteriaManagement Í∏∞Ï§Ä Ï∂îÍ∞Ä Ï§ë...', {
        criterionData,
        projectIdFromProps: projectId,
        hasProjectId: !!criterionData.project_id
      });
      const createdCriterion = await dataService.createCriteria(criterionData);
      
      if (!createdCriterion) {
        setErrors({ name: 'Í∏∞Ï§Ä Ï∂îÍ∞ÄÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.' });
        return;
      }

      console.log('‚úÖ Í∏∞Ï§ÄÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§:', createdCriterion);
      
      // Îç∞Ïù¥ÌÑ∞ Îã§Ïãú Î°úÎìú
      const updatedCriteriaData = await dataService.getCriteria(projectId);
      const convertedUpdatedCriteria = (updatedCriteriaData || []).map(convertToCriterion);
      setCriteria(convertedUpdatedCriteria);
      
      setNewCriterion({ name: '', description: '', parentId: '' });
      setErrors({});
      
      // Í∏∞Ï§Ä Í∞úÏàò Î≥ÄÍ≤Ω ÏΩúÎ∞± Ìò∏Ï∂ú
      if (onCriteriaChange) {
        onCriteriaChange(convertedUpdatedCriteria.length);
      }
    } catch (error) {
      console.error('‚ùå CriteriaManagement Í∏∞Ï§Ä Ï∂îÍ∞Ä Ïã§Ìå®:', {
        error,
        errorMessage: error instanceof Error ? error.message : 'Unknown error',
        errorStack: error instanceof Error ? error.stack : undefined,
        projectId,
        criterionName: newCriterion.name
      });
      
      const errorMessage = error instanceof Error ? error.message : 'Í∏∞Ï§Ä Ï∂îÍ∞Ä Ï§ë Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.';
      setErrors({ name: `Ïò§Î•ò: ${errorMessage}` });
    }
  };

  const handleMoveUp = async (id: string) => {
    const criterion = criteria.find(c => c.id === id);
    if (!criterion) return;
    
    // Í∞ôÏùÄ Î∂ÄÎ™®Ïùò Í∞ôÏùÄ Î†àÎ≤® Í∏∞Ï§ÄÎì§ Ï∞æÍ∏∞
    const siblings = criteria.filter(c => 
      c.parent_id === criterion.parent_id && 
      c.level === criterion.level
    ).sort((a, b) => (a.order || 0) - (b.order || 0));
    
    const currentIndex = siblings.findIndex(s => s.id === id);
    if (currentIndex <= 0) return; // Ïù¥ÎØ∏ Ï≤´ Î≤àÏß∏
    
    // ÏàúÏÑú ÍµêÌôò (Î°úÏª¨ ÏÉÅÌÉúÎßå ÏóÖÎç∞Ïù¥Ìä∏)
    const updatedCriteria = [...criteria];
    const currentIdx = updatedCriteria.findIndex(c => c.id === id);
    const prevIdx = updatedCriteria.findIndex(c => c.id === siblings[currentIndex - 1].id);
    
    if (currentIdx >= 0 && prevIdx >= 0) {
      const temp = updatedCriteria[currentIdx].order;
      updatedCriteria[currentIdx].order = updatedCriteria[prevIdx].order;
      updatedCriteria[prevIdx].order = temp;
      setCriteria(updatedCriteria);
    }
  };

  const handleMoveDown = async (id: string) => {
    const criterion = criteria.find(c => c.id === id);
    if (!criterion) return;
    
    // Í∞ôÏùÄ Î∂ÄÎ™®Ïùò Í∞ôÏùÄ Î†àÎ≤® Í∏∞Ï§ÄÎì§ Ï∞æÍ∏∞
    const siblings = criteria.filter(c => 
      c.parent_id === criterion.parent_id && 
      c.level === criterion.level
    ).sort((a, b) => (a.order || 0) - (b.order || 0));
    
    const currentIndex = siblings.findIndex(s => s.id === id);
    if (currentIndex >= siblings.length - 1) return; // Ïù¥ÎØ∏ ÎßàÏßÄÎßâ
    
    // ÏàúÏÑú ÍµêÌôò (Î°úÏª¨ ÏÉÅÌÉúÎßå ÏóÖÎç∞Ïù¥Ìä∏)
    const updatedCriteria = [...criteria];
    const currentIdx = updatedCriteria.findIndex(c => c.id === id);
    const nextIdx = updatedCriteria.findIndex(c => c.id === siblings[currentIndex + 1].id);
    
    if (currentIdx >= 0 && nextIdx >= 0) {
      const temp = updatedCriteria[currentIdx].order;
      updatedCriteria[currentIdx].order = updatedCriteria[nextIdx].order;
      updatedCriteria[nextIdx].order = temp;
      setCriteria(updatedCriteria);
    }
  };

  const handleDeleteCriterion = async (id: string) => {
    console.log('Í∏∞Ï§Ä ÏÇ≠Ï†ú:', id);
    
    try {
      const success = await dataService.deleteCriteria(id, projectId);
      
      if (!success) {
        console.error('‚ùå Í∏∞Ï§Ä ÏÇ≠Ï†ú Ïã§Ìå®');
        return;
      }

      console.log('‚úÖ Í∏∞Ï§ÄÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§:', id);
      
      // Îç∞Ïù¥ÌÑ∞ Îã§Ïãú Î°úÎìú
      const updatedCriteriaData = await dataService.getCriteria(projectId);
      const convertedUpdatedCriteria = (updatedCriteriaData || []).map(convertToCriterion);
      setCriteria(convertedUpdatedCriteria);
      
      // Í∏∞Ï§Ä Í∞úÏàò Î≥ÄÍ≤Ω ÏΩúÎ∞± Ìò∏Ï∂ú
      if (onCriteriaChange) {
        onCriteriaChange(convertedUpdatedCriteria.length);
      }
    } catch (error) {
      console.error('‚ùå Í∏∞Ï§Ä ÏÇ≠Ï†ú Ïã§Ìå®:', error);
    }
  };


  // ÏÉÅÏúÑ Í∏∞Ï§ÄÏúºÎ°ú ÏÑ†ÌÉù Í∞ÄÎä•Ìïú Î™®Îì† Í∏∞Ï§Ä (ÏµúÎåÄ 4Î†àÎ≤®ÍπåÏßÄ, 5Î†àÎ≤®ÏùÑ ÎßåÎì§Í∏∞ ÏúÑÌï¥)
  const getAvailableParentCriteria = () => {
    const flatCriteria = getAllCriteria(criteria);
    // ÏµúÎåÄ 4Î†àÎ≤®ÍπåÏßÄÎßå ÏÉÅÏúÑ Í∏∞Ï§ÄÏúºÎ°ú ÏÑ†ÌÉù Í∞ÄÎä• (5Î†àÎ≤®ÍπåÏßÄ ÏßÄÏõê)
    return flatCriteria.filter(c => (c.level || 1) <= 4);
  };

  // Î†àÎ≤®Î≥Ñ ÌëúÏãú ÏïÑÏù¥ÏΩò (ÏµúÏÜåÌôî)
  const getLevelIcon = (level: number) => {
    switch (level) {
      case 1: return 'G'; // Goal
      case 2: return 'C'; // Criteria
      case 3: return 'A'; // Alternatives
      case 4: return 'S'; // Sub-criteria
      case 5: return 'D'; // Detailed criteria
      default: return 'L';
    }
  };

  // Î†àÎ≤®Î≥Ñ Î™ÖÏπ≠ Î∞òÌôò
  const getLevelName = (level: number) => {
    switch (level) {
      case 1: return 'Î™©Ìëú(Goal)';
      case 2: return 'Í∏∞Ï§Ä(Criteria)';
      case 3: return 'ÎåÄÏïà(Alternatives)';
      case 4: return 'ÌïòÏúÑÍ∏∞Ï§Ä(Sub-criteria)';
      case 5: return 'ÏÑ∏Î∂ÄÍ∏∞Ï§Ä(Detailed)';
      default: return `Î†àÎ≤® ${level}`;
    }
  };

  const handleClearAllData = async () => {
    if (window.confirm('Í≤ΩÍ≥†: Î™®Îì† Í∏∞Ï§Ä Îç∞Ïù¥ÌÑ∞Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\nÏù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.')) {
      try {
        // Î™®Îì† Í∏∞Ï§ÄÏùÑ PostgreSQLÏóêÏÑú ÏÇ≠Ï†ú
        for (const criterion of criteria) {
          await dataService.deleteCriteria(criterion.id, projectId);
        }
        
        setCriteria([]);
        setNewCriterion({ name: '', description: '', parentId: '' });
        setErrors({});
        console.log('‚úÖ Î™®Îì† Í∏∞Ï§ÄÏù¥ PostgreSQLÏóêÏÑú ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
      } catch (error) {
        console.error('Failed to clear all criteria:', error);
        alert('‚ùå Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
      }
    }
  };

  const handleLoadTemplateData = async () => {
    if (criteria.length > 0) {
      if (!window.confirm('‚ö†Ô∏è Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏäµÎãàÎã§. ÌÖúÌîåÎ¶øÏúºÎ°ú ÍµêÏ≤¥ÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
        return;
      }
    }
    
    // ÎÖºÎ¨∏ ÏûëÏÑ± Í∂åÏû•: 3Í∞ú Í∏∞Ï§Ä ÌÖúÌîåÎ¶ø Íµ¨Ï°∞
    const templateCriteria = [
      {
        project_id: projectId,
        name: 'Í∏∞Ï§Ä 1',
        description: 'Ï≤´ Î≤àÏß∏ ÌèâÍ∞Ä Í∏∞Ï§Ä',
        parent_id: null,
        level: 1,
        position: 1,
        order: 1
      },
      {
        project_id: projectId,
        name: 'Í∏∞Ï§Ä 2', 
        description: 'Îëê Î≤àÏß∏ ÌèâÍ∞Ä Í∏∞Ï§Ä',
        parent_id: null,
        level: 1,
        position: 2,
        order: 2
      },
      {
        project_id: projectId,
        name: 'Í∏∞Ï§Ä 3',
        description: 'ÏÑ∏ Î≤àÏß∏ ÌèâÍ∞Ä Í∏∞Ï§Ä (ÎÖºÎ¨∏ Í∂åÏû• Íµ¨Ï°∞)',
        parent_id: null,
        level: 1,
        position: 3,
        order: 3
      }
    ];
    
    try {
      // Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
      if (criteria.length > 0) {
        console.log('üóëÔ∏è Í∏∞Ï°¥ Í∏∞Ï§Ä ÏÇ≠Ï†ú Ï§ë...');
        for (const criterion of criteria) {
          if (criterion.id && criterion.id !== 'temp') {
            try {
              await dataService.deleteCriteria(criterion.id, projectId);
            } catch (deleteError) {
              console.error('Í∏∞Ï§Ä ÏÇ≠Ï†ú Ïã§Ìå®:', deleteError);
            }
          }
        }
      }
      
      // Ïû†Ïãú ÎåÄÍ∏∞ (DB ÏÇ≠Ï†ú ÏôÑÎ£å ÎåÄÍ∏∞)
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // ÌÖúÌîåÎ¶ø Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
      console.log('üìù ÌÖúÌîåÎ¶ø Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± Ï§ë...');
      for (const criterionData of templateCriteria) {
        try {
          const result = await dataService.createCriteria(criterionData);
          console.log('‚úÖ ÌÖúÌîåÎ¶ø Í∏∞Ï§Ä ÏÉùÏÑ±:', result);
        } catch (createError) {
          console.error('ÌÖúÌîåÎ¶ø Í∏∞Ï§Ä ÏÉùÏÑ± Ïã§Ìå®:', createError);
        }
      }
      
      // Îç∞Ïù¥ÌÑ∞ Îã§Ïãú Î°úÎìú
      await new Promise(resolve => setTimeout(resolve, 500));
      const criteriaData = await dataService.getCriteria(projectId);
      const convertedCriteria = (criteriaData || []).map(convertToCriterion);
      setCriteria(convertedCriteria);
      
      setNewCriterion({ name: '', description: '', parentId: '' });
      setErrors({});
      alert('‚úÖ ÎÖºÎ¨∏ Í∂åÏû• ÌÖúÌîåÎ¶ø(3Í∞ú Í∏∞Ï§Ä)Ïù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.\nÌïÑÏöîÏãú Ï∂îÍ∞Ä Í∏∞Ï§ÄÏùÑ ÏûÖÎ†•Ìï† Ïàò ÏûàÏäµÎãàÎã§.');
    } catch (error) {
      console.error('Failed to load template data:', error);
      alert(`‚ùå ÌÖúÌîåÎ¶ø Î°úÎìú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`);
    }
  };

  const handleBulkImport = async (importedCriteria: Criterion[]) => {
    try {
      console.log('üîÑ ÏùºÍ¥Ñ Í∞ÄÏ†∏Ïò§Í∏∞ ÏãúÏûë:', importedCriteria);
      
      if (!importedCriteria || importedCriteria.length === 0) {
        alert('‚ö†Ô∏è Í∞ÄÏ†∏Ïò¨ Í∏∞Ï§ÄÏù¥ ÏóÜÏäµÎãàÎã§.');
        return;
      }
      
      // Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ ÌôïÏù∏
      if (criteria.length > 0) {
        const confirm = window.confirm('Í∏∞Ï°¥ Í∏∞Ï§ÄÏùÑ Î™®Îëê ÏÇ≠Ï†úÌïòÍ≥† ÏÉàÎ°úÏö¥ Í∏∞Ï§ÄÏúºÎ°ú ÍµêÏ≤¥ÌïòÏãúÍ≤†ÏäµÎãàÍπå?');
        if (!confirm) {
          setShowBulkInput(false);
          return;
        }
        
        // Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
        console.log('üóëÔ∏è Í∏∞Ï°¥ Í∏∞Ï§Ä ÏÇ≠Ï†ú Ï§ë...');
        for (const criterion of criteria) {
          if (criterion.id && criterion.id !== 'temp') {
            try {
              await dataService.deleteCriteria(criterion.id, projectId);
            } catch (deleteError) {
              console.error('Í∏∞Ï§Ä ÏÇ≠Ï†ú Ïã§Ìå®:', deleteError);
            }
          }
        }
        
        // ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
        setCriteria([]);
        await new Promise(resolve => setTimeout(resolve, 500));
      }
      
      // Í≥ÑÏ∏µÍµ¨Ï°∞ Î∂ÑÏÑù
      const rootCriteria = importedCriteria.filter(c => c.level === 1);
      const hierarchicalCriteria = importedCriteria.filter(c => c.level > 1);
      
      console.log(`üìä Í∞ÄÏ†∏Ïò¨ Í∏∞Ï§Ä Î∂ÑÏÑù: Ï¥ù ${importedCriteria.length}Í∞ú (Î†àÎ≤®1: ${rootCriteria.length}Í∞ú, ÌïòÏúÑ: ${hierarchicalCriteria.length}Í∞ú)`);
      
      // ÏßÅÏ†ë Í≥ÑÏ∏µÍµ¨Ï°∞ Ï†ÄÏû• Ï≤òÎ¶¨
      await processHierarchicalImport(importedCriteria);
      setShowBulkInput(false);
      
    } catch (error) {
      console.error('Failed to bulk import criteria:', error);
      alert(`‚ùå ÏùºÍ¥Ñ Í∞ÄÏ†∏Ïò§Í∏∞ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`);
      setShowBulkInput(false);
    }
  };

  const handleImportChoice = async (saveOnlyMain: boolean) => {
    if (!pendingImport) return;
    
    try {
      if (saveOnlyMain) {
        await processMainCriteriaOnly(pendingImport.rootCriteria, pendingImport.subCriteria);
      } else {
        await processHierarchicalImport(pendingImport.allCriteria);
      }
    } catch (error) {
      console.error('Failed to process import choice:', error);
      alert('‚ùå Í∞ÄÏ†∏Ïò§Í∏∞ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setShowImportDialog(false);
      setPendingImport(null);
    }
  };

  const processHierarchicalImport = async (allCriteria: Criterion[]) => {
    console.log('üîÑ Í≥ÑÏ∏µÍµ¨Ï°∞ Ïú†ÏßÄÌïòÏó¨ Ï†ÄÏû• ÏãúÏûë:', allCriteria);
    
    try {
      // Î†àÎ≤® ÏàúÏÑúÎåÄÎ°ú Ï†ïÎ†¨ÌïòÏó¨ Î∂ÄÎ™®Î∂ÄÌÑ∞ Î®ºÏ†Ä Ï†ÄÏû•
      const sortedCriteria = [...allCriteria].sort((a, b) => {
        // Î®ºÏ†Ä Î†àÎ≤®Î°ú Ï†ïÎ†¨, Í∞ôÏùÄ Î†àÎ≤®Ïù¥Î©¥ orderÎ°ú Ï†ïÎ†¨
        if (a.level !== b.level) return a.level - b.level;
        return (a.order || 0) - (b.order || 0);
      });
      
      const idMapping = new Map<string, string>(); // ÏûÑÏãú IDÎ•º Ïã§Ï†ú Ï†ÄÏû•Îêú IDÎ°ú Îß§Ìïë
      const savedCriteria: any[] = [];
      
      for (const criterion of sortedCriteria) {
        // Î∂ÄÎ™® ID Îß§Ìïë
        let mappedParentId: string | null = null;
        if (criterion.parent_id && idMapping.has(criterion.parent_id)) {
          mappedParentId = idMapping.get(criterion.parent_id)!;
        }
        
        const criterionData = {
          project_id: projectId,
          name: criterion.name,
          description: criterion.description || '',
          parent_id: mappedParentId,
          level: criterion.level,
          position: criterion.order || 1,
          order: criterion.order || 1
        };
        
        console.log(`üíæ Í∏∞Ï§Ä Ï†ÄÏû• (Î†àÎ≤® ${criterion.level}):`, {
          name: criterion.name,
          parent_id: mappedParentId,
          level: criterion.level
        });
        
        try {
          const savedCriterion = await dataService.createCriteria(criterionData);
          if (savedCriterion && savedCriterion.id) {
            // ÏûÑÏãú IDÎ•º Ïã§Ï†ú Ï†ÄÏû•Îêú IDÎ°ú Îß§Ìïë
            idMapping.set(criterion.id, savedCriterion.id);
            savedCriteria.push(savedCriterion);
          }
        } catch (saveError) {
          console.error(`Í∏∞Ï§Ä Ï†ÄÏû• Ïã§Ìå® (${criterion.name}):`, saveError);
          throw new Error(`Í∏∞Ï§Ä "${criterion.name}" Ï†ÄÏû• Ïã§Ìå®`);
        }
      }
      
      // Îç∞Ïù¥ÌÑ∞ Îã§Ïãú Î°úÎìú
      const criteriaData = await dataService.getCriteria(projectId);
      const convertedCriteria = (criteriaData || []).map(convertToCriterion);
      setCriteria(convertedCriteria);
      
      alert(`‚úÖ ${savedCriteria.length}Í∞úÏùò Í∏∞Ï§ÄÏù¥ Í≥ÑÏ∏µÍµ¨Ï°∞Î•º Ïú†ÏßÄÌïòÏó¨ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.`);
    } catch (error) {
      console.error('Í≥ÑÏ∏µÍµ¨Ï°∞ Ï†ÄÏû• Ïã§Ìå®:', error);
      throw error;
    }
  };

  const processMainCriteriaOnly = async (rootCriteria: Criterion[], subCriteria: Criterion[]) => {
    // ÏµúÏÉÅÏúÑ Í∏∞Ï§ÄÎßå Ï†ÄÏû•ÌïòÍ≥† ÌïòÏúÑ Í∏∞Ï§ÄÏùÄ Î©îÌÉÄÎç∞Ïù¥ÌÑ∞Î°ú Ìè¨Ìï®
    for (const rootCriterion of rootCriteria) {
      const relatedSubCriteria = subCriteria.filter(c => c.parent_id === rootCriterion.id);
      
      console.log(`üìã "${rootCriterion.name}" Í∏∞Ï§ÄÏùò ÌïòÏúÑ Í∏∞Ï§Ä ${relatedSubCriteria.length}Í∞ú:`, 
        relatedSubCriteria.map(s => s.name));
      
      const criterionData = convertToCriteriaData({
        name: rootCriterion.name,
        description: rootCriterion.description || '',
        parent_id: null,
        level: 1,
        order: rootCriterion.order || 1
      });
      
      // ÌïòÏúÑ Í∏∞Ï§Ä Ï†ïÎ≥¥Î•º ÏÑ§Î™ÖÏóê Ï∂îÍ∞Ä
      if (relatedSubCriteria.length > 0) {
        const subCriteriaText = relatedSubCriteria.map(sub => 
          sub.description ? `${sub.name}: ${sub.description}` : sub.name
        ).join(', ');
        
        criterionData.description = criterionData.description 
          ? `${criterionData.description} [ÌïòÏúÑ Í∏∞Ï§Ä: ${subCriteriaText}]`
          : `[ÌïòÏúÑ Í∏∞Ï§Ä: ${subCriteriaText}]`;
      }
      
      console.log('üíæ Ï£º Í∏∞Ï§Ä Ï†ÄÏû•:', criterionData);
      await dataService.createCriteria(criterionData);
    }
    
    // Îç∞Ïù¥ÌÑ∞ Îã§Ïãú Î°úÎìú
    const criteriaData = await dataService.getCriteria(projectId);
    const convertedCriteria = (criteriaData || []).map(convertToCriterion);
    setCriteria(convertedCriteria);
    
    alert(`‚úÖ ${rootCriteria.length}Í∞úÏùò Ï£º Í∏∞Ï§ÄÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.\nÌïòÏúÑ Í∏∞Ï§ÄÎì§ÏùÄ Í∞Å Í∏∞Ï§ÄÏùò ÏÑ§Î™ÖÏóê Ìè¨Ìï®ÎêòÏóàÏäµÎãàÎã§.`);
  };

  const processFlatImport = async (criteria: Criterion[]) => {
    // Î™®Îì† Í∏∞Ï§ÄÏùÑ ÌèâÎ©¥ Íµ¨Ï°∞Î°ú Ï†ÄÏû• (Î†àÎ≤® 1Î°ú Î≥ÄÌôò)
    for (const criterion of criteria) {
      const criterionData = convertToCriteriaData({
        name: criterion.name,
        description: criterion.description || '',
        parent_id: null, // AHPÏóêÏÑúÎäî ÌèâÎ©¥ Íµ¨Ï°∞ ÏÇ¨Ïö©
        level: 1,
        order: criterion.order || 1
      });
      
      console.log('üíæ ÌèâÎ©¥ Í∏∞Ï§Ä Ï†ÄÏû•:', criterionData);
      await dataService.createCriteria(criterionData);
    }
    
    // Îç∞Ïù¥ÌÑ∞ Îã§Ïãú Î°úÎìú
    const criteriaData = await dataService.getCriteria(projectId);
    const convertedCriteria = (criteriaData || []).map(convertToCriterion);
    setCriteria(convertedCriteria);
    
    alert(`‚úÖ ${criteria.length}Í∞úÏùò Í∏∞Ï§ÄÏù¥ ÌèâÎ©¥ Íµ¨Ï°∞Î°ú Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.`);
  };

  const renderHelpModal = () => {
    if (!showHelp) return null;
    
    return (
      <div className="fixed inset-0 z-50 flex items-center justify-center" style={{ backgroundColor: 'var(--modal-backdrop)' }}>
        <div className="rounded-lg p-6 max-w-2xl max-h-[80vh] overflow-y-auto" style={{ backgroundColor: 'var(--modal-bg)', boxShadow: 'var(--shadow-2xl)' }}>
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-lg font-bold" style={{ color: 'var(--text-primary)' }}>üìö Í∏∞Ï§Ä ÏÑ§Ï†ï ÎèÑÏõÄÎßê</h3>
            <button
              onClick={() => setShowHelp(false)}
              className="text-xl transition-colors" style={{ color: 'var(--text-muted)' }} onMouseEnter={(e) => e.currentTarget.style.color = 'var(--text-secondary)'} onMouseLeave={(e) => e.currentTarget.style.color = 'var(--text-muted)'}
            >
              √ó
            </button>
          </div>
          
          <div className="space-y-4 text-sm">
            <div>
              <h4 className="font-semibold mb-2" style={{ color: 'var(--status-info-text)' }}>üéØ AHP Í∏∞Ï§Ä Í≥ÑÏ∏µÍµ¨Ï°∞ÎûÄ?</h4>
              <p className="leading-relaxed" style={{ color: 'var(--text-secondary)' }}>
                AHP(Analytic Hierarchy Process)ÏóêÏÑú Í∏∞Ï§Ä Í≥ÑÏ∏µÍµ¨Ï°∞Îäî ÏùòÏÇ¨Í≤∞Ï†ï Î¨∏Ï†úÎ•º Ï≤¥Í≥ÑÏ†ÅÏúºÎ°ú Î∂ÑÌï¥ÌïòÏó¨ 
                ÏÉÅÏúÑ Î™©ÌëúÎ∂ÄÌÑ∞ ÏÑ∏Î∂Ä Í∏∞Ï§ÄÍπåÏßÄ Îã®Í≥ÑÎ≥ÑÎ°ú Íµ¨ÏÑ±ÌïòÎäî Íµ¨Ï°∞ÏûÖÎãàÎã§.
              </p>
            </div>

            <div>
              <h4 className="font-semibold mb-2" style={{ color: 'var(--status-success-text)' }}>üìä AHP 5Îã®Í≥Ñ Í≥ÑÏ∏µÍµ¨Ï°∞</h4>
              <ul className="list-disc list-inside space-y-1" style={{ color: 'var(--text-secondary)' }}>
                <li><strong>üéØ Level 1 (Î™©Ìëú):</strong> ÏµúÏ¢Ö ÏùòÏÇ¨Í≤∞Ï†ï Î™©Ìëú</li>
                <li><strong>üìã Level 2 (Í∏∞Ï§Ä):</strong> Ï£ºÏöî ÌèâÍ∞Ä ÏòÅÏó≠ (<span className="text-yellow-700 font-semibold">3Í∞ú Í∂åÏû•</span>, ÏµúÎåÄ 7Í∞ú)</li>
                <li><strong>üé™ Level 3 (ÎåÄÏïà):</strong> ÏÑ†ÌÉù Í∞ÄÎä•Ìïú ÎåÄÏïàÎì§ (ÌëúÏ§Ä AHP)</li>
                <li><strong>üìù Level 4 (ÌïòÏúÑÍ∏∞Ï§Ä):</strong> ÏÑ∏Î∂ÑÌôîÎêú ÌèâÍ∞Ä Í∏∞Ï§Ä</li>
                <li><strong>üîπ Level 5 (ÏÑ∏Î∂ÄÍ∏∞Ï§Ä):</strong> ÏµúÏÉÅÏÑ∏ ÏàòÏ§Ä Í∏∞Ï§Ä</li>
              </ul>
            </div>

            <div>
              <h4 className="font-semibold mb-2" style={{ color: 'var(--accent-secondary)' }}>üîÑ Î†àÏù¥ÏïÑÏõÉ Î™®Îìú</h4>
              <div className="grid grid-cols-2 gap-3">
                <div className="p-3 rounded" style={{ backgroundColor: 'var(--status-info-bg)', border: '1px solid var(--status-info-border)' }}>
                  <div className="font-medium" style={{ color: 'var(--status-info-text)' }}>üìã ÏÑ∏Î°úÌòï</div>
                  <div className="text-xs" style={{ color: 'var(--text-muted)' }}>Í≥ÑÏ∏µÍµ¨Ï°∞Î•º ÏÑ∏Î°úÎ°ú ÌëúÏãú, ÏÉÅÏÑ∏ Ï†ïÎ≥¥ ÌôïÏù∏Ïóê Ï†ÅÌï©</div>
                </div>
                <div className="p-3 rounded" style={{ backgroundColor: 'var(--status-success-bg)', border: '1px solid var(--status-success-border)' }}>
                  <div className="font-medium" style={{ color: 'var(--status-success-text)' }}>üìä Í∞ÄÎ°úÌòï</div>
                  <div className="text-xs" style={{ color: 'var(--text-muted)' }}>Í≥ÑÏ∏µÍµ¨Ï°∞Î•º Í∞ÄÎ°úÎ°ú ÌëúÏãú, Ï†ÑÏ≤¥ Íµ¨Ï°∞ ÌååÏïÖÏóê Ï†ÅÌï©</div>
                </div>
              </div>
            </div>

            <div>
              <h4 className="font-semibold mb-2" style={{ color: 'var(--status-danger-text)' }}>‚ö†Ô∏è Ï£ºÏùòÏÇ¨Ìï≠</h4>
              <ul className="list-disc list-inside space-y-1" style={{ color: 'var(--text-secondary)' }}>
                <li>Í∏∞Ï§ÄÎ™ÖÏùÄ Ï§ëÎ≥µÎê† Ïàò ÏóÜÏäµÎãàÎã§</li>
                <li>Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞Î•º ÏÇ≠Ï†úÌïòÎ©¥ Î≥µÍµ¨Ìï† Ïàò ÏóÜÏäµÎãàÎã§</li>
                <li><strong>ÎÖºÎ¨∏ ÏûëÏÑ± Ïãú 3-5Í∞ú Í∏∞Ï§Ä Í∂åÏû•</strong> (7Í∞ú Ï¥àÍ≥º Ïãú ÏùºÍ¥ÄÏÑ± Ï†ÄÌïò)</li>
                <li>ÌèâÍ∞ÄÎ∞©Î≤ï(ÏåçÎåÄÎπÑÍµê/ÏßÅÏ†ëÏûÖÎ†•)ÏùÄ Ïã†Ï§ëÌûà ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</li>
              </ul>
            </div>

            <div>
              <h4 className="font-semibold mb-2" style={{ color: 'var(--status-warning-text)' }}>üí° Ïã§Î¨¥ ÌåÅ</h4>
              <ul className="list-disc list-inside space-y-1" style={{ color: 'var(--text-secondary)' }}>
                <li>Í∏∞Ï§Ä ÏÑ§Î™ÖÏùÑ Î™ÖÌôïÌûà ÏûëÏÑ±ÌïòÏó¨ ÌèâÍ∞ÄÏûêÏùò Ïù¥Ìï¥Î•º ÎèïÏäµÎãàÎã§</li>
                <li>ÎπÑÏä∑Ìïú ÏÑ±Í≤©Ïùò Í∏∞Ï§ÄÎì§ÏùÄ ÌïòÎÇòÏùò ÏÉÅÏúÑ Í∏∞Ï§ÄÏúºÎ°ú Í∑∏Î£πÌôîÌïòÏÑ∏Ïöî</li>
                <li>Ï∏°Ï†ï Í∞ÄÎä•Ìïú Í∏∞Ï§ÄÍ≥º Ï£ºÍ¥ÄÏ†Å Í∏∞Ï§ÄÏùÑ Ï†ÅÏ†àÌûà Í∑†ÌòïÏûàÍ≤å Íµ¨ÏÑ±ÌïòÏÑ∏Ïöî</li>
                <li>üóëÔ∏è Î≤ÑÌäºÏúºÎ°ú Í∞úÎ≥Ñ Í∏∞Ï§ÄÏùÑ ÏÇ≠Ï†úÌï† Ïàò ÏûàÏäµÎãàÎã§</li>
                <li>üìù Í∏∞Î≥∏ ÌÖúÌîåÎ¶øÏùÑ ÌôúÏö©ÌïòÏó¨ Îπ†Î•¥Í≤å ÏãúÏûëÌï† Ïàò ÏûàÏäµÎãàÎã§</li>
              </ul>
            </div>
          </div>

          <div className="mt-6 flex justify-end">
            <Button variant="primary" onClick={() => setShowHelp(false)}>
              ÌôïÏù∏
            </Button>
          </div>
        </div>
      </div>
    );
  };

  // ÏãúÍ∞ÅÏ†Å ÎπåÎçî Î™®ÎìúÏùº Îïå HierarchyTreeBuilder Î†åÎçîÎßÅ
  if (useVisualBuilder) {
    return (
      <div className="space-y-4">
        <div className="flex justify-between items-center">
          <h2 className="text-xl font-bold">ÏãúÍ∞ÅÏ†Å Î™®Îç∏ Íµ¨Ï∂ï</h2>
          <Button
            onClick={() => setUseVisualBuilder(false)}
            variant="outline"
            size="sm"
          >
            ‚Üê Í∏∞Î≥∏ Î™®ÎìúÎ°ú Ï†ÑÌôò
          </Button>
        </div>
        <HierarchyTreeBuilder
          projectId={projectId}
          projectTitle={projectTitle || 'AHP ÌîÑÎ°úÏ†ùÌä∏'}
          onComplete={async (hierarchy) => {
            // Í≥ÑÏ∏µ Íµ¨Ï°∞Î•º ÌèâÎ©¥ Íµ¨Ï°∞Î°ú Î≥ÄÌôòÌïòÏó¨ Ï†ÄÏû•
            const flattenTree = (node: any, parentId: string | null = null, level: number = 0): any[] => {
              const result: any[] = [];
              if (node.id !== 'root') {
                result.push({
                  name: node.name,
                  description: '',
                  parent_id: parentId,
                  level: level,
                  order: node.order || 0
                });
              }
              if (node.children) {
                node.children.forEach((child: any, index: number) => {
                  result.push(...flattenTree(child, node.id === 'root' ? null : node.id, level + 1));
                });
              }
              return result;
            };

            const flatCriteria = flattenTree(hierarchy);
            
            // Í∞Å Í∏∞Ï§ÄÏùÑ Î∞±ÏóîÎìúÏóê Ï†ÄÏû•
            for (const criterion of flatCriteria) {
              const criterionData = convertToCriteriaData(criterion);
              await dataService.createCriteria(criterionData);
            }
            
            // Îç∞Ïù¥ÌÑ∞ Îã§Ïãú Î°úÎìú
            const criteriaData = await dataService.getCriteria(projectId);
            const convertedCriteria = (criteriaData || []).map(convertToCriterion);
            setCriteria(convertedCriteria);
            
            alert(`‚úÖ ${flatCriteria.length}Í∞úÏùò Í∏∞Ï§ÄÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.`);
            setUseVisualBuilder(false);
            onComplete();
          }}
        />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {renderHelpModal()}
      <Card title="2-1Îã®Í≥Ñ ‚Äî Í∏∞Ï§ÄÏ∂îÍ∞Ä">
        <div className="space-y-6">
          {/* ÎÖºÎ¨∏ ÏûëÏÑ± Í∂åÏû• Íµ¨Ï°∞ ÏïàÎÇ¥ */}
          <div className="bg-gradient-to-r from-yellow-50 to-amber-50 border-l-4 border-yellow-400 p-4 rounded-r-lg mb-4">
            <div className="flex items-start">
              <div className="flex-shrink-0">
                <svg className="h-5 w-5 text-yellow-600 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                </svg>
              </div>
              <div className="ml-3">
                <h3 className="text-sm font-semibold text-yellow-800">üìÑ ÎÖºÎ¨∏ ÏûëÏÑ± Í∂åÏû•: Í∏∞Î≥∏ 3Í∞ú Í∏∞Ï§Ä</h3>
                <div className="mt-2 text-sm text-yellow-700">
                  <p className="mb-2">ÌïôÏà† ÎÖºÎ¨∏ÏùÑ ÏúÑÌï¥ <strong>3Í∞ú Í∏∞Ï§Ä</strong>ÏúºÎ°ú ÏãúÏûëÌïòÎäî Í≤ÉÏùÑ Í∂åÏû•Ìï©ÎãàÎã§. (ÌïÑÏöîÏãú ÏµúÎåÄ 7Í∞úÍπåÏßÄ Ï∂îÍ∞Ä Í∞ÄÎä•)</p>
                  <ul className="list-disc list-inside space-y-1 text-xs">
                    <li>ÏåçÎåÄÎπÑÍµê ÌöüÏàò: 3Í∞ú Í∏∞Ï§Ä = 3Ìöå, 5Í∞ú Í∏∞Ï§Ä = 10Ìöå, 7Í∞ú Í∏∞Ï§Ä = 21Ìöå</li>
                    <li>ÏùºÍ¥ÄÏÑ± Í≤ÄÏ¶ù(CR ‚â§ 0.1) ÌÜµÍ≥º ÌôïÎ•†Ïù¥ ÎÜíÏïÑÏßëÎãàÎã§</li>
                    <li>Í∏∞Ï§ÄÏù¥ ÎßéÏùÑÏàòÎ°ù ÌèâÍ∞ÄÏûêÏùò ÌîºÎ°úÎèÑ Ï¶ùÍ∞Ä Î∞è ÏùëÎãµÎ•† Ï†ÄÌïò</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>

          <div className="flex items-center justify-between rounded-lg p-4" style={{ backgroundColor: 'var(--status-info-bg)', border: '1px solid var(--status-info-border)' }}>
            <div>
              <h4 className="font-medium mb-2" style={{ color: 'var(--status-info-text)' }}>üìã ÌîÑÎ°úÏ†ùÌä∏ Í∏∞Ï§Ä ÏÑ§Ï†ï Í∞ÄÏù¥Îìú</h4>
              <ul className="text-sm space-y-1" style={{ color: 'var(--status-info-text)' }}>
                <li>‚Ä¢ ÌîÑÎ°úÏ†ùÌä∏ Î™©ÌëúÏóê ÎßûÎäî ÌèâÍ∞Ä Í∏∞Ï§ÄÏùÑ Í≥ÑÏ∏µÏ†ÅÏúºÎ°ú Íµ¨ÏÑ±</li>
                <li>‚Ä¢ 1Î†àÎ≤®(Î™©Ìëú) ‚Üí 2Î†àÎ≤®(Í∏∞Ï§Ä) ‚Üí 3Î†àÎ≤®(ÎåÄÏïà) ÏàúÏÑúÎ°ú Ï∂îÍ∞Ä</li>
                <li>‚Ä¢ Í∏∞Ï§ÄÎ™ÖÏùÄ Ï§ëÎ≥µÎê† Ïàò ÏóÜÏúºÎ©∞, ÏµúÎåÄ 5Îã®Í≥ÑÍπåÏßÄ ÏÑ∏Î∂ÑÌôî Í∞ÄÎä•</li>
                <li>‚Ä¢ Í∞úÎ≥Ñ Í∏∞Ï§Ä ÏÇ≠Ï†úÎäî üóëÔ∏è Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨ ÏàòÌñâ</li>
              </ul>
            </div>
            <div className="flex space-x-2">
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => setShowHelp(true)}
              >
                üìö ÎèÑÏõÄÎßê
              </Button>
              {criteria.length > 0 && (
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={handleClearAllData}
                  className="transition-all duration-200" 
                  style={{ color: 'var(--status-danger-text)', borderColor: 'var(--status-danger-border)' }} 
                  onMouseEnter={(e) => e.currentTarget.style.backgroundColor = 'var(--status-danger-bg)'} 
                  onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}
                >
                  üóëÔ∏è Î™®Îì† Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
                </Button>
              )}
            </div>
          </div>

          {/* Evaluation Method Selection */}
          <div>
            <label className="block text-sm font-medium mb-3" style={{ color: 'var(--text-primary)' }}>
              ÌèâÍ∞ÄÎ∞©Î≤ï ÏÑ†ÌÉù
            </label>
            <div className="flex space-x-4">
              <label className="flex items-center">
                <input
                  type="radio"
                  value="pairwise"
                  checked={evaluationMethod === 'pairwise'}
                  onChange={(e) => setEvaluationMethod(e.target.value as 'pairwise')}
                  className="mr-2"
                />
                <span className="text-sm" style={{ color: 'var(--text-primary)' }}>ÏåçÎåÄÎπÑÍµê</span>
              </label>
              <label className="flex items-center">
                <input
                  type="radio"
                  value="direct"
                  checked={evaluationMethod === 'direct'}
                  onChange={(e) => setEvaluationMethod(e.target.value as 'direct')}
                  className="mr-2"
                />
                <span className="text-sm" style={{ color: 'var(--text-primary)' }}>ÏßÅÏ†ëÏûÖÎ†•</span>
              </label>
            </div>
          </div>

          {/* Current Criteria Tree Visualization */}
          <div>
            <div className="flex items-center justify-between mb-4">
              <h4 className="font-medium" style={{ color: 'var(--text-primary)' }}>üå≥ Í∏∞Ï§Ä Í≥ÑÏ∏µÍµ¨Ï°∞ ÏãúÍ∞ÅÌôî</h4>
              <div className="flex items-center space-x-2">
                <span className="text-sm" style={{ color: 'var(--text-muted)' }}>ÌëúÏãú Î∞©Ïãù:</span>
                <div className="flex rounded-lg p-1" style={{ backgroundColor: 'var(--bg-elevated)' }}>
                  <button
                    onClick={() => setLayoutMode('vertical')}
                    className="px-3 py-1 text-xs rounded-md transition-colors"
                    style={{
                      backgroundColor: layoutMode === 'vertical' ? 'var(--status-info-text)' : 'transparent',
                      color: layoutMode === 'vertical' ? 'white' : 'var(--text-muted)'
                    }}
                    onMouseEnter={(e) => {
                      if (layoutMode !== 'vertical') {
                        e.currentTarget.style.backgroundColor = 'var(--bg-muted)';
                      }
                    }}
                    onMouseLeave={(e) => {
                      if (layoutMode !== 'vertical') {
                        e.currentTarget.style.backgroundColor = 'transparent';
                      }
                    }}
                  >
                    üìã ÏÑ∏Î°úÌòï
                  </button>
                  <button
                    onClick={() => setLayoutMode('horizontal')}
                    className="px-3 py-1 text-xs rounded-md transition-colors"
                    style={{
                      backgroundColor: layoutMode === 'horizontal' ? 'var(--status-success-text)' : 'transparent',
                      color: layoutMode === 'horizontal' ? 'white' : 'var(--text-muted)'
                    }}
                    onMouseEnter={(e) => {
                      if (layoutMode !== 'horizontal') {
                        e.currentTarget.style.backgroundColor = 'var(--bg-muted)';
                      }
                    }}
                    onMouseLeave={(e) => {
                      if (layoutMode !== 'horizontal') {
                        e.currentTarget.style.backgroundColor = 'transparent';
                      }
                    }}
                  >
                    üìä Í∞ÄÎ°úÌòï
                  </button>
                </div>
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={handleLoadTemplateData}
                  className="transition-all duration-200 ml-2" 
                  style={{ color: 'var(--status-info-text)', borderColor: 'var(--status-info-border)' }} 
                  onMouseEnter={(e) => e.currentTarget.style.backgroundColor = 'var(--status-info-bg)'} 
                  onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}
                >
                  üìù Í∏∞Î≥∏ ÌÖúÌîåÎ¶ø
                </Button>
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => setShowBulkInput(true)}
                  className="transition-all duration-200 ml-2" 
                  style={{ color: 'var(--status-success-text)', borderColor: 'var(--status-success-border)' }} 
                  onMouseEnter={(e) => e.currentTarget.style.backgroundColor = 'var(--status-success-bg)'} 
                  onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}
                >
                  üóÇÔ∏è ÏùºÍ¥Ñ ÏûÖÎ†•
                </Button>
                <Button 
                  variant="primary" 
                  size="sm"
                  onClick={() => setUseVisualBuilder(true)}
                  className="transition-all duration-200 ml-2" 
                >
                  üé® ÏãúÍ∞ÅÏ†Å ÎπåÎçî
                </Button>
                {criteria.length > 0 && (
                  <Button 
                    variant="outline" 
                    size="sm"
                    onClick={handleClearAllData}
                    className="transition-all duration-200" 
                    style={{ color: 'var(--status-danger-text)', borderColor: 'var(--status-danger-border)' }} 
                    onMouseEnter={(e) => e.currentTarget.style.backgroundColor = 'var(--status-danger-bg)'} 
                    onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}
                  >
                    üóëÔ∏è Ï¥àÍ∏∞Ìôî
                  </Button>
                )}
              </div>
            </div>
            <HierarchyTreeVisualization
              nodes={getFlatCriteriaForVisualization(criteria)}
              title={`${projectTitle || 'AHP ÌîÑÎ°úÏ†ùÌä∏'} Í∏∞Ï§Ä Í≥ÑÏ∏µÍµ¨Ï°∞`}
              showWeights={true}
              interactive={true}
              layout={layoutMode}
              onLayoutChange={setLayoutMode}
              onNodeClick={(node) => {
                console.log('ÏÑ†ÌÉùÎêú Í∏∞Ï§Ä:', node);
                // Ï∂îÌõÑ Ìé∏Ïßë Î™®Îìú Íµ¨ÌòÑ Í∞ÄÎä•
              }}
              onNodeDelete={(node) => {
                // TreeNodeÎ•º idÎ°ú Î≥ÄÌôòÌïòÏó¨ ÏÇ≠Ï†ú Ìï®Ïàò Ìò∏Ï∂ú
                handleDeleteCriterion(node.id);
              }}
              allowDelete={true}
            />
          </div>

          {/* Add New Criterion */}
          <div className="pt-6" style={{ borderTop: '1px solid var(--border-light)' }}>
            <h4 className="font-medium mb-4" style={{ color: 'var(--text-primary)' }}>‚ûï ÏÉà Í∏∞Ï§Ä Ï∂îÍ∞Ä</h4>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label className="block text-sm font-medium mb-2" style={{ color: 'var(--text-secondary)' }}>
                  ÏÉÅÏúÑ Í∏∞Ï§Ä
                </label>
                <select
                  value={newCriterion.parentId}
                  onChange={(e) => setNewCriterion(prev => ({ ...prev, parentId: e.target.value }))}
                  className="w-full px-3 py-2 rounded-md focus:outline-none focus:ring-2"
                  style={{ 
                    backgroundColor: 'var(--input-bg)', 
                    color: 'var(--text-primary)', 
                    border: '1px solid var(--input-border)',
                    borderRadius: 'var(--radius-md)'
                  }}
                  onFocus={(e) => {
                    e.target.style.borderColor = 'var(--accent-primary)';
                    e.target.style.boxShadow = '0 0 0 2px var(--accent-focus)';
                  }}
                  onBlur={(e) => {
                    e.target.style.borderColor = 'var(--input-border)';
                    e.target.style.boxShadow = 'none';
                  }}
                >
                  <option value="">üéØ ÏµúÏÉÅÏúÑ Í∏∞Ï§Ä (Î™©Ìëú)</option>
                  {getAvailableParentCriteria().map(criterion => (
                    <option key={criterion.id} value={criterion.id}>
                      {getLevelIcon(criterion.level || 1)} {criterion.name} ({getLevelName(criterion.level || 1)})
                    </option>
                  ))}
                </select>
              </div>

              <Input
                id="criterionName"
                label="Í∏∞Ï§ÄÎ™Ö"
                placeholder="Í∏∞Ï§ÄÎ™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                value={newCriterion.name}
                onChange={(value) => setNewCriterion(prev => ({ ...prev, name: value }))}
                error={errors.name}
                required
              />

              <Input
                id="criterionDescription"
                label="Í∏∞Ï§Ä ÏÑ§Î™Ö (ÏÑ†ÌÉù)"
                placeholder="Í∏∞Ï§ÄÏóê ÎåÄÌïú ÏÑ§Î™Ö"
                value={newCriterion.description}
                onChange={(value) => setNewCriterion(prev => ({ ...prev, description: value }))}
              />
            </div>

            <div className="flex justify-end mt-4">
              <Button onClick={handleAddCriterion} variant="primary">
                Í∏∞Ï§Ä Ï∂îÍ∞Ä
              </Button>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex justify-between items-center pt-6" style={{ borderTop: '1px solid var(--border-light)' }}>
            <div className="text-sm" style={{ color: 'var(--text-muted)' }}>
              Ï¥ù {getAllCriteria(criteria).length}Í∞ú Í∏∞Ï§Ä (
              {[1,2,3,4,5].map(level => {
                const count = getAllCriteria(criteria).filter(c => (c.level || 1) === level).length;
                return count > 0 ? `L${level}: ${count}Í∞ú` : null;
              }).filter(Boolean).join(', ') || 'ÏóÜÏùå'}
              ) | ÌèâÍ∞ÄÎ∞©Î≤ï: {evaluationMethod === 'pairwise' ? 'ÏåçÎåÄÎπÑÍµê' : 'ÏßÅÏ†ëÏûÖÎ†•'}
            </div>
            <div className="flex space-x-3">
              <Button variant="secondary">
                Ï†ÄÏû•
              </Button>
              <Button
                variant="primary"
                onClick={onComplete}
                disabled={criteria.length === 0}
              >
                Îã§Ïùå Îã®Í≥ÑÎ°ú
              </Button>
            </div>
          </div>
        </div>
      </Card>

      {/* Bulk Criteria Input Modal */}
      {showBulkInput && (
        <BulkCriteriaInput
          onImport={handleBulkImport}
          onCancel={() => setShowBulkInput(false)}
          existingCriteria={criteria}
        />
      )}

      {/* Import Choice Modal */}
      {showImportDialog && pendingImport && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
            <div className="p-6">
              <div className="flex items-center mb-4">
                <div className="flex-shrink-0">
                  <svg className="h-6 w-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
                <h3 className="ml-3 text-lg font-medium text-gray-900">
                  Í≥ÑÏ∏µÍµ¨Ï°∞ Í∞ÄÏ†∏Ïò§Í∏∞ Î∞©Ïãù ÏÑ†ÌÉù
                </h3>
              </div>
              
              <div className="mb-6">
                <p className="text-sm text-gray-600 mb-4">
                  Í≥ÑÏ∏µÍµ¨Ï°∞Í∞Ä Í∞êÏßÄÎêòÏóàÏäµÎãàÎã§:
                </p>
                <div className="bg-gray-50 rounded-lg p-4 mb-4">
                  <div className="text-sm">
                    <div className="flex justify-between mb-2">
                      <span className="font-medium">Ï£º Í∏∞Ï§Ä:</span>
                      <span className="text-blue-600">{pendingImport.rootCriteria.length}Í∞ú</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="font-medium">ÌïòÏúÑ Í∏∞Ï§Ä:</span>
                      <span className="text-green-600">{pendingImport.subCriteria.length}Í∞ú</span>
                    </div>
                  </div>
                </div>
                
                <div className="space-y-3 text-sm text-gray-600">
                  <div className="border-l-4 border-blue-500 pl-3">
                    <p className="font-medium text-gray-900">ÏòµÏÖò 1: Ï£º Í∏∞Ï§ÄÎßå Ï†ÄÏû• (Í∂åÏû•)</p>
                    <p>ÌïòÏúÑ Í∏∞Ï§ÄÎì§ÏùÄ Í∞Å Ï£º Í∏∞Ï§ÄÏùò ÏÑ§Î™ÖÏóê Ìè¨Ìï®Îê©ÎãàÎã§.</p>
                    <p className="text-blue-600">‚Üí AHP ÌèâÍ∞ÄÏóê Ï†ÅÌï©Ìïú {pendingImport.rootCriteria.length}Í∞ú Í∏∞Ï§Ä ÏÉùÏÑ±</p>
                  </div>
                  <div className="border-l-4 border-gray-400 pl-3">
                    <p className="font-medium text-gray-900">ÏòµÏÖò 2: Î™®Îì† Í∏∞Ï§ÄÏùÑ Í∞úÎ≥Ñ Ï†ÄÏû•</p>
                    <p>Î™®Îì† Ìï≠Î™©ÏùÑ Î≥ÑÎèÑÏùò Í∏∞Ï§ÄÏúºÎ°ú Ï†ÄÏû•Ìï©ÎãàÎã§.</p>
                    <p className="text-gray-600">‚Üí Ï¥ù {pendingImport.allCriteria.length}Í∞ú Í∏∞Ï§Ä ÏÉùÏÑ±</p>
                  </div>
                </div>
              </div>

              <div className="flex space-x-3">
                <Button
                  variant="primary"
                  onClick={() => handleImportChoice(true)}
                  className="flex-1"
                >
                  Ï£º Í∏∞Ï§ÄÎßå Ï†ÄÏû•
                </Button>
                <Button
                  variant="secondary"
                  onClick={() => handleImportChoice(false)}
                  className="flex-1"
                >
                  Î™®Îì† Í∏∞Ï§Ä Ï†ÄÏû•
                </Button>
              </div>
              
              <div className="mt-4 text-center">
                <Button
                  variant="outline"
                  onClick={() => {
                    setShowImportDialog(false);
                    setPendingImport(null);
                    setShowBulkInput(true);
                  }}
                  size="sm"
                >
                  Ï∑®ÏÜå
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CriteriaManagement;