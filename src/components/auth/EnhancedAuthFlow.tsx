import React, { useState, useEffect } from 'react';
import UnifiedAuthPage from './UnifiedAuthPage';
import TwoFactorAuth from './TwoFactorAuth';
import AdminSelectPage from './AdminSelectPage';
import { twoFactorService, twoFactorSecurity } from '../../services/twoFactorService';
import { authApi } from '../../services/api';

interface EnhancedAuthFlowProps {
  onAuthSuccess: (user: any, tokens: any) => void;
  onAuthError: (error: string) => void;
}

type AuthStep = 'login' | '2fa-verify' | '2fa-setup' | 'admin-select';

interface AuthState {
  user: any;
  tempTokens: any;
  requires2FA: boolean;
  twoFactorEnabled: boolean;
  isAdmin: boolean;
}

const EnhancedAuthFlow: React.FC<EnhancedAuthFlowProps> = ({
  onAuthSuccess,
  onAuthError
}) => {
  const [currentStep, setCurrentStep] = useState<AuthStep>('login');
  const [authState, setAuthState] = useState<AuthState>({
    user: null,
    tempTokens: null,
    requires2FA: false,
    twoFactorEnabled: false,
    isAdmin: false
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string>('');

  // Handle initial login
  const handleLogin = async (email: string, password: string, role?: string) => {
    if (!twoFactorSecurity.checkRateLimit(`login_${email}`)) {
      setError('ÎÑàÎ¨¥ ÎßéÏùÄ Î°úÍ∑∏Ïù∏ ÏãúÎèÑÍ∞Ä ÏûàÏóàÏäµÎãàÎã§. 5Î∂Ñ ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    setLoading(true);
    setError('');

    try {
      console.log('üîê Î°úÍ∑∏Ïù∏ ÏãúÎèÑ:', { email, role });
      
      // First, attempt login
      const loginResponse = await authApi.login(email, password);
      
      if (!loginResponse.success) {
        throw new Error(loginResponse.error || 'Î°úÍ∑∏Ïù∏Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }

      const { user, token } = loginResponse.data;
      
      // Check if user has 2FA enabled
      const twoFactorStatus = await twoFactorService.getStatus();
      
      if (twoFactorStatus.success && twoFactorStatus.data.is_enabled) {
        // 2FA is enabled, require verification
        console.log('üîí 2FA Ïù∏Ï¶ù ÌïÑÏöî');
        setAuthState({
          user,
          tempTokens: { access_token: token },
          requires2FA: true,
          twoFactorEnabled: true,
          isAdmin: user.is_superuser || user.is_staff
        });
        setCurrentStep('2fa-verify');
      } else {
        // No 2FA, proceed with login
        console.log('‚úÖ2FA ÏóÜÏù¥ Î°úÍ∑∏Ïù∏ ÏôÑÎ£å');
        
        // Check if admin and needs service selection
        if (user.is_superuser || user.is_staff) {
          setAuthState({
            user,
            tempTokens: { access_token: token },
            requires2FA: false,
            twoFactorEnabled: false,
            isAdmin: true
          });
          setCurrentStep('admin-select');
        } else {
          // Regular user login complete
          onAuthSuccess(user, { access_token: token });
        }
      }
    } catch (err: any) {
      console.error('Î°úÍ∑∏Ïù∏ Ïò§Î•ò:', err);
      setError(err.message || 'Î°úÍ∑∏Ïù∏ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setLoading(false);
    }
  };

  // Handle registration
  const handleRegister = async (email: string, password: string, role?: string) => {
    if (!twoFactorSecurity.checkRateLimit(`register_${email}`)) {
      setError('ÎÑàÎ¨¥ ÎßéÏùÄ Í∞ÄÏûÖ ÏãúÎèÑÍ∞Ä ÏûàÏóàÏäµÎãàÎã§. 5Î∂Ñ ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    setLoading(true);
    setError('');

    try {
      console.log('üìù ÌöåÏõêÍ∞ÄÏûÖ ÏãúÎèÑ:', { email, role });
      
      // Ïã§Ï†ú ÌöåÏõêÍ∞ÄÏûÖ API Ìò∏Ï∂ú
      const registerResponse = await authApi.register(email, password, {
        role: role || 'evaluator',
        is_active: true
      });
      
      if (!registerResponse.success) {
        throw new Error(registerResponse.error || 'ÌöåÏõêÍ∞ÄÏûÖÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }

      console.log('‚úÖ ÌöåÏõêÍ∞ÄÏûÖ ÏÑ±Í≥µ:', registerResponse.data);
      
      // ÌöåÏõêÍ∞ÄÏûÖ ÏÑ±Í≥µ ÌõÑ ÏûêÎèô Î°úÍ∑∏Ïù∏ ÏãúÎèÑ
      try {
        await handleLogin(email, password, role);
      } catch (loginErr) {
        // ÏûêÎèô Î°úÍ∑∏Ïù∏ Ïã§Ìå® Ïãú ÏàòÎèô Î°úÍ∑∏Ïù∏ ÏïàÎÇ¥
        setError('ÌöåÏõêÍ∞ÄÏûÖÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§. Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî.');
        console.warn('ÏûêÎèô Î°úÍ∑∏Ïù∏ Ïã§Ìå®, ÏàòÎèô Î°úÍ∑∏Ïù∏ ÌïÑÏöî:', loginErr);
      }
      
    } catch (err: any) {
      console.error('ÌöåÏõêÍ∞ÄÏûÖ Ïò§Î•ò:', err);
      setError(err.message || 'ÌöåÏõêÍ∞ÄÏûÖ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setLoading(false);
    }
  };

  // Handle 2FA verification
  const handle2FAVerification = async (code: string) => {
    if (!twoFactorSecurity.validateTOTPFormat(code) && !twoFactorSecurity.validateBackupCodeFormat(code)) {
      setError('Ïò¨Î∞îÎ•∏ Ïù∏Ï¶ù ÏΩîÎìú ÌòïÏãùÏù¥ ÏïÑÎãôÎãàÎã§.');
      return;
    }

    if (!twoFactorSecurity.checkRateLimit(`2fa_${authState.user?.email}`)) {
      setError('ÎÑàÎ¨¥ ÎßéÏùÄ Ïù∏Ï¶ù ÏãúÎèÑÍ∞Ä ÏûàÏóàÏäµÎãàÎã§. 5Î∂Ñ ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    setLoading(true);
    setError('');

    try {
      console.log('üîê 2FA ÏΩîÎìú Í≤ÄÏ¶ù:', { codeLength: code.length });
      
      const codeType = twoFactorSecurity.validateTOTPFormat(code) ? 'totp' : 'backup';
      const verifyResponse = await twoFactorService.verifyCode(code, codeType);
      
      if (!verifyResponse.success) {
        throw new Error(verifyResponse.error || 'Ïù∏Ï¶ù ÏΩîÎìúÍ∞Ä Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§.');
      }

      console.log('‚úÖ 2FA Ïù∏Ï¶ù ÏÑ±Í≥µ');
      
      // Clear rate limit on success
      twoFactorSecurity.clearRateLimit(`2fa_${authState.user.email}`);
      
      // Check if admin needs service selection
      if (authState.isAdmin) {
        setCurrentStep('admin-select');
      } else {
        // Complete authentication
        const finalTokens = verifyResponse.data.tokens || authState.tempTokens;
        onAuthSuccess(authState.user, finalTokens);
      }
      
    } catch (err: any) {
      console.error('2FA Ïù∏Ï¶ù Ïò§Î•ò:', err);
      setError(err.message || '2FA Ïù∏Ï¶ù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setLoading(false);
    }
  };

  // Handle 2FA setup completion
  const handle2FASetupComplete = async (secret: string, backupCodes: string[]) => {
    setLoading(true);
    setError('');

    try {
      console.log('üîß 2FA ÏÑ§Ï†ï ÏôÑÎ£å');
      
      // In a real implementation, save the secret and backup codes to backend
      // For now, just proceed with authentication
      
      if (authState.isAdmin) {
        setCurrentStep('admin-select');
      } else {
        onAuthSuccess(authState.user, authState.tempTokens);
      }
      
    } catch (err: any) {
      console.error('2FA ÏÑ§Ï†ï Ïò§Î•ò:', err);
      setError(err.message || '2FA ÏÑ§Ï†ï Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setLoading(false);
    }
  };

  // Handle admin service selection
  const handleAdminServiceSelect = (serviceType: 'admin' | 'personal') => {
    console.log('üéØ Í¥ÄÎ¶¨Ïûê ÏÑúÎπÑÏä§ ÏÑ†ÌÉù:', serviceType);
    
    // Update user role based on selection
    const updatedUser = {
      ...authState.user,
      current_role: serviceType === 'admin' ? 'admin' : 'evaluator'
    };
    
    onAuthSuccess(updatedUser, authState.tempTokens);
  };

  // Handle social authentication
  const handleSocialAuth = async (provider: 'google' | 'kakao' | 'naver') => {
    setLoading(true);
    setError('');

    try {
      console.log(`üåê ${provider} ÏÜåÏÖú Î°úÍ∑∏Ïù∏`);
      
      // Social authentication would be implemented here
      // For now, show placeholder message
      setError(`${provider} Î°úÍ∑∏Ïù∏ÏùÄ Í≥ß ÏßÄÏõêÎê† ÏòàÏ†ïÏûÖÎãàÎã§.`);
      
    } catch (err: any) {
      console.error(`${provider} Î°úÍ∑∏Ïù∏ Ïò§Î•ò:`, err);
      setError(`${provider} Î°úÍ∑∏Ïù∏ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.`);
    } finally {
      setLoading(false);
    }
  };

  // Reset authentication flow
  const resetAuthFlow = () => {
    setCurrentStep('login');
    setAuthState({
      user: null,
      tempTokens: null,
      requires2FA: false,
      twoFactorEnabled: false,
      isAdmin: false
    });
    setError('');
    setLoading(false);
  };

  // Render current step
  const renderCurrentStep = () => {
    switch (currentStep) {
      case 'login':
        return (
          <UnifiedAuthPage
            onLogin={handleLogin}
            onRegister={handleRegister}
            onGoogleAuth={() => handleSocialAuth('google')}
            onKakaoAuth={() => handleSocialAuth('kakao')}
            onNaverAuth={() => handleSocialAuth('naver')}
            loading={loading}
            error={error}
          />
        );

      case '2fa-verify':
        return (
          <div className="min-h-screen flex items-center justify-center bg-gray-50">
            <div className="w-full max-w-md">
              <TwoFactorAuth
                userEmail={authState.user?.email || ''}
                mode="verify"
                onVerificationSuccess={handle2FAVerification}
                onVerificationFailed={(error) => setError(error)}
                loading={loading}
              />
              
              <div className="mt-6 text-center">
                <button
                  onClick={resetAuthFlow}
                  className="text-sm text-blue-600 hover:text-blue-800 underline"
                >
                  Îã§Î•∏ Í≥ÑÏ†ïÏúºÎ°ú Î°úÍ∑∏Ïù∏
                </button>
              </div>
            </div>
          </div>
        );

      case '2fa-setup':
        return (
          <div className="min-h-screen flex items-center justify-center bg-gray-50">
            <div className="w-full max-w-md">
              <TwoFactorAuth
                userEmail={authState.user?.email || ''}
                mode="setup"
                onSetupComplete={handle2FASetupComplete}
                loading={loading}
              />
              
              <div className="mt-6 text-center">
                <button
                  onClick={() => {
                    // Skip 2FA setup for now
                    if (authState.isAdmin) {
                      setCurrentStep('admin-select');
                    } else {
                      onAuthSuccess(authState.user, authState.tempTokens);
                    }
                  }}
                  className="text-sm text-gray-600 hover:text-gray-800 underline"
                >
                  ÎÇòÏ§ëÏóê ÏÑ§Ï†ïÌïòÍ∏∞
                </button>
              </div>
            </div>
          </div>
        );

      case 'admin-select':
        return (
          <div className="min-h-screen flex items-center justify-center bg-gray-50">
            <div className="w-full max-w-md">
              <AdminSelectPage
                onAdminSelect={() => handleAdminServiceSelect('admin')}
                onUserSelect={() => handleAdminServiceSelect('personal')}
                onBackToLogin={resetAuthFlow}
              />
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return renderCurrentStep();
};

export default EnhancedAuthFlow;